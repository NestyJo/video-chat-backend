/// <reference types="jest" />
import { Request, Response, NextFunction } from 'express';\nimport { getProfile, updateProfile } from '../../controllers/authController';\nimport { AuthService } from '../../services/authService';\nimport { IUser } from '../../models/User';\nimport { Types } from 'mongoose';\n\n// Mock the AuthService\njest.mock('../../services/authService');\nconst mockedAuthService = AuthService as jest.Mocked<typeof AuthService>;\n\ndescribe('AuthController', () => {\n  let mockRequest: Partial<Request>;\n  let mockResponse: Partial<Response>;\n  let mockNext: NextFunction;\n\n  beforeEach(() => {\n    mockRequest = {};\n    mockResponse = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn(),\n    };\n    mockNext = jest.fn();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getProfile', () => {\n    it('should get user profile successfully', async () => {\n      const mockUser: Partial<IUser> = {\n        _id: new Types.ObjectId(),\n        username: 'testuser',\n        email: 'test@example.com',\n        firstName: 'Test',\n        lastName: 'User',\n        role: 'user',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const mockUserProfile: Partial<IUser> = {\n        _id: mockUser._id,\n        username: 'testuser',\n        email: 'test@example.com',\n        firstName: 'Test',\n        lastName: 'User',\n        bio: 'Test bio',\n        role: 'user',\n        isActive: true,\n        lastLogin: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockRequest.user = mockUser as IUser;\n      mockedAuthService.getUserProfile.mockResolvedValue(mockUserProfile as IUser);\n\n      await getProfile(mockRequest as Request, mockResponse as Response, mockNext);\n\n      expect(mockedAuthService.getUserProfile).toHaveBeenCalledWith(mockUser._id!.toString());\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        data: {\n          user: {\n            id: mockUserProfile._id!.toString(),\n            username: mockUserProfile.username,\n            email: mockUserProfile.email,\n            firstName: mockUserProfile.firstName,\n            lastName: mockUserProfile.lastName,\n            bio: mockUserProfile.bio,\n            role: mockUserProfile.role,\n            isActive: mockUserProfile.isActive,\n            lastLogin: mockUserProfile.lastLogin,\n            createdAt: mockUserProfile.createdAt,\n            updatedAt: mockUserProfile.updatedAt,\n          },\n        },\n      });\n    });\n\n    it('should throw error when user is not authenticated', async () => {\n      mockRequest.user = undefined;\n\n      await getProfile(mockRequest as Request, mockResponse as Response, mockNext);\n\n      expect(mockNext).toHaveBeenCalledWith(expect.objectContaining({\n        message: 'Authentication required',\n        statusCode: 401,\n      }));\n    });\n  });\n\n  describe('updateProfile', () => {\n    it('should update user profile successfully', async () => {\n      const mockUser: Partial<IUser> = {\n        _id: new Types.ObjectId(),\n        username: 'testuser',\n        email: 'test@example.com',\n        firstName: 'Test',\n        lastName: 'User',\n        role: 'user',\n      };\n\n      const mockUpdatedUser: Partial<IUser> = {\n        _id: mockUser._id,\n        username: 'testuser',\n        email: 'test@example.com',\n        firstName: 'Updated',\n        lastName: 'User',\n        bio: 'Updated bio',\n        role: 'user',\n        updatedAt: new Date(),\n      };\n\n      mockRequest.user = mockUser as IUser;\n      mockRequest.body = {\n        firstName: 'Updated',\n        bio: 'Updated bio',\n      };\n\n      mockedAuthService.updateUserProfile.mockResolvedValue(mockUpdatedUser as IUser);\n\n      await updateProfile(mockRequest as Request, mockResponse as Response, mockNext);\n\n      expect(mockedAuthService.updateUserProfile).toHaveBeenCalledWith(\n        mockUser._id!.toString(),\n        {\n          username: undefined,\n          firstName: 'Updated',\n          lastName: undefined,\n          bio: 'Updated bio',\n        }\n      );\n      expect(mockResponse.status).toHaveBeenCalledWith(200);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        success: true,\n        message: 'Profile updated successfully',\n        data: {\n          user: {\n            id: mockUpdatedUser._id!.toString(),\n            username: mockUpdatedUser.username,\n            email: mockUpdatedUser.email,\n            firstName: mockUpdatedUser.firstName,\n            lastName: mockUpdatedUser.lastName,\n            bio: mockUpdatedUser.bio,\n            role: mockUpdatedUser.role,\n            updatedAt: mockUpdatedUser.updatedAt,\n          },\n        },\n      });\n    });\n\n    it('should throw error when user is not authenticated', async () => {\n      mockRequest.user = undefined;\n      mockRequest.body = {\n        firstName: 'Updated',\n      };\n\n      await updateProfile(mockRequest as Request, mockResponse as Response, mockNext);\n\n      expect(mockNext).toHaveBeenCalledWith(expect.objectContaining({\n        message: 'Authentication required',\n        statusCode: 401,\n      }));\n    });\n  });\n});